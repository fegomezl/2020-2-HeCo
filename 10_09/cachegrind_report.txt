--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         6291456 B, 64 B, 12-way associative
Command:          ./example.x 5000 6000
Data file:        cachegrind.out.7843
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                   D1mr            DLmr           Dw                  D1mw                DLmw                
--------------------------------------------------------------------------------
1,382,373,544 (100.0%) 1,744 (100.0%) 1,681 (100.0%) 690,594,661 (100.0%) 14,572 (100.0%) 8,582 (100.0%) 90,202,246 (100.0%) 37,502,508 (100.0%) 11,255,592 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     I1mr         ILmr         Dr                   D1mr           DLmr           Dw                  D1mw                DLmw                 file:function
--------------------------------------------------------------------------------
1,380,090,097 (99.83%)   9 ( 0.52%)   9 ( 0.54%) 690,050,028 (99.92%)     3 ( 0.02%)     2 ( 0.02%) 90,010,034 (99.79%) 37,500,004 (99.99%) 11,253,973 (99.99%)  /home/live/Documents/HC2020/10_09/example.cpp:main

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/live/Documents/HC2020/10_09/example.cpp
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                   D1mr       DLmr       Dw                  D1mw                DLmw               

-- line 5 ----------------------------------------
          .          .          .                    .          .          .                   .                   .                  .           
          .          .          .                    .          .          .                   .                   .                  .           /*
          .          .          .                    .          .          .                   .                   .                  .              Tests cache misses.
          .          .          .                    .          .          .                   .                   .                  .           */
          .          .          .                    .          .          .                   .                   .                  .           
          .          .          .                    .          .          .                   .                   .                  .           void print_elapsed(auto start, auto end );
          .          .          .                    .          .          .                   .                   .                  .           
          .          .          .                    .          .          .                   .                   .                  .           int main(int argc, char **argv)
          5 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)           0          0          0                   3 ( 0.00%)          0                  0           {
          2 ( 0.00%) 0          0                    1 ( 0.00%) 0          0                   0                   0                  0             if (argc < 3){
          .          .          .                    .          .          .                   .                   .                  .               printf("Usage: cacheTest sizeI sizeJ\nIn first input.\n");
          .          .          .                    .          .          .                   .                   .                  .               return 1;
          .          .          .                    .          .          .                   .                   .                  .             }
          7 ( 0.00%) 0          0                    2 ( 0.00%) 1 ( 0.01%) 0                   2 ( 0.00%)          0                  0             long sI = atoi(argv[1]);
          7 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)           2 ( 0.00%) 0          0                   2 ( 0.00%)          0                  0             long sJ = atoi(argv[2]);
          .          .          .                    .          .          .                   .                   .                  .           
          2 ( 0.00%) 0          0                    0          0          0                   2 ( 0.00%)          0                  0             auto start = std::chrono::steady_clock::now();
          .          .          .                    .          .          .                   .                   .                  .             
          6 ( 0.00%) 0          0                    2 ( 0.00%) 0          0                   1 ( 0.00%)          0                  0             printf("Operating on matrix of size %ld by %ld\n", sI, sJ);
          .          .          .                    .          .          .                   .                   .                  .           
          9 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)           2 ( 0.00%) 0          0                   2 ( 0.00%)          0                  0             long *arr = new long[sI*sJ]; // double array.
          2 ( 0.00%) 0          0                    0          0          0                   2 ( 0.00%)          0                  0             auto end = std::chrono::steady_clock::now();
          5 ( 0.00%) 0          0                    2 ( 0.00%) 0          0                   1 ( 0.00%)          0                  0             print_elapsed(start, end);
          .          .          .                    .          .          .                   .                   .                  .             
          .          .          .                    .          .          .                   .                   .                  .             // option 1
          2 ( 0.00%) 0          0                    0          0          0                   2 ( 0.00%)          0                  0             start = std::chrono::steady_clock::now();
     25,005 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)      15,002 ( 0.00%) 0          0                   1 ( 0.00%)          0                  0             for (long i=0; i < sI; ++i)
150,020,000 (10.85%) 0          0           90,010,000 (13.03%) 0          0               5,000 ( 0.01%)          0                  0               for (long j=0; j < sJ; ++j)
300,000,000 (21.70%) 1 ( 0.06%) 1 ( 0.06%) 150,000,000 (21.72%) 0          0          30,000,000 (33.26%)  3,750,000 (10.00%) 3,750,000 (33.32%)        arr[(i * (sJ)) + j ] = i;
          2 ( 0.00%) 0          0                    0          0          0                   2 ( 0.00%)          1 ( 0.00%)         1 ( 0.00%)    end = std::chrono::steady_clock::now();
          5 ( 0.00%) 0          0                    2 ( 0.00%) 0          0                   1 ( 0.00%)          0                  0             print_elapsed(start, end);
          .          .          .                    .          .          .                   .                   .                  .             
          .          .          .                    .          .          .                   .                   .                  .             // option 2
          2 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)           0          0          0                   2 ( 0.00%)          0                  0             start = std::chrono::steady_clock::now();
     25,004 ( 0.00%) 0          0               15,002 ( 0.00%) 0          0                   1 ( 0.00%)          0                  0             for (long i=0; i < sI; ++i)
150,020,000 (10.85%) 0          0           90,010,000 (13.03%) 0          0               5,000 ( 0.01%)          0                  0                 for (long j=0; j < sJ; ++j)
300,000,000 (21.70%) 1 ( 0.06%) 1 ( 0.06%) 150,000,000 (21.72%) 0          0          30,000,000 (33.26%) 30,000,000 (79.99%) 3,754,985 (33.36%)           arr[(j * (sI)) + i ] = i;
          2 ( 0.00%) 0          0                    0          0          0                   2 ( 0.00%)          1 ( 0.00%)         1 ( 0.00%)    end = std::chrono::steady_clock::now();
          5 ( 0.00%) 0          0                    2 ( 0.00%) 0          0                   1 ( 0.00%)          0                  0             print_elapsed(start, end);
          .          .          .                    .          .          .                   .                   .                  .           
          .          .          .                    .          .          .                   .                   .                  .             // option 3
          2 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)           0          0          0                   2 ( 0.00%)          0                  0             start = std::chrono::steady_clock::now();
480,000,007 (34.72%) 1 ( 0.06%) 1 ( 0.06%) 210,000,003 (30.41%) 0          0          30,000,001 (33.26%)  3,750,001 (10.00%) 3,748,985 (33.31%)    for (int i=0; i < sI*sJ; ++i) arr[i] = i;
          2 ( 0.00%) 0          0                    0          0          0                   2 ( 0.00%)          1 ( 0.00%)         1 ( 0.00%)    end = std::chrono::steady_clock::now();
          5 ( 0.00%) 0          0                    2 ( 0.00%) 0          0                   1 ( 0.00%)          0                  0             print_elapsed(start, end);
          .          .          .                    .          .          .                   .                   .                  .           
          6 ( 0.00%) 0          0                    2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)          1 ( 0.00%)          0                  0             printf("%ld\n", arr[0]);
          .          .          .                    .          .          .                   .                   .                  .             
          1 ( 0.00%) 0          0                    0          0          0                   0                   0                  0             return 0;
          2 ( 0.00%) 0          0                    2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)          0                   0                  0           }
          .          .          .                    .          .          .                   .                   .                  .             
          .          .          .                    .          .          .                   .                   .                  .           
         24 ( 0.00%) 1 ( 0.06%) 1 ( 0.06%)           0          0          0                  16 ( 0.00%)          0                  0           void print_elapsed(auto start, auto end )
          .          .          .                    .          .          .                   .                   .                  .           {
         16 ( 0.00%) 0          0                    0          0          0                   4 ( 0.00%)          0                  0             std::cout << "Elapsed time in ms: "
         64 ( 0.00%) 0          0                    0          0          0                  24 ( 0.00%)          0                  0                       << std::chrono::duration_cast<std::chrono::milliseconds>(end-start).count()
         12 ( 0.00%) 0          0                    0          0          0                   4 ( 0.00%)          0                  0                       << "\n";
         39 ( 0.00%) 3 ( 0.17%) 3 ( 0.18%)          18 ( 0.00%) 1 ( 0.01%) 0                   5 ( 0.00%)          0                  0           }

--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                   D1mr       DLmr       Dw                  D1mw                DLmw                
--------------------------------------------------------------------------------
1,380,090,252 (99.83%) 13 ( 0.75%) 13 ( 0.77%) 690,050,046 (99.92%) 4 ( 0.03%) 2 ( 0.02%) 90,010,087 (99.79%) 37,500,004 (99.99%) 11,253,973 (99.99%)  events annotated

